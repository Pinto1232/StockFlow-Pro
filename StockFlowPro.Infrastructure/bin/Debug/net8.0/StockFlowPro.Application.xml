<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StockFlowPro.Application</name>
    </assembly>
    <members>
        <member name="T:StockFlowPro.Application.DTOs.RoleDto">
            <summary>
            Data transfer object for role information.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleDto.Id">
            <summary>
            Gets or sets the unique identifier of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleDto.Name">
            <summary>
            Gets or sets the unique name of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleDto.DisplayName">
            <summary>
            Gets or sets the display name of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleDto.Description">
            <summary>
            Gets or sets the description of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleDto.Permissions">
            <summary>
            Gets or sets the list of permissions associated with this role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleDto.IsActive">
            <summary>
            Gets or sets a value indicating whether the role is active.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleDto.IsSystemRole">
            <summary>
            Gets or sets a value indicating whether this is a system role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleDto.Priority">
            <summary>
            Gets or sets the priority of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleDto.CreatedAt">
            <summary>
            Gets or sets the creation timestamp.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleDto.UpdatedAt">
            <summary>
            Gets or sets the last update timestamp.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleDto.UserCount">
            <summary>
            Gets or sets the number of users assigned to this role.
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.DTOs.CreateRoleDto">
            <summary>
            Data transfer object for creating a new role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.CreateRoleDto.Name">
            <summary>
            Gets or sets the unique name of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.CreateRoleDto.DisplayName">
            <summary>
            Gets or sets the display name of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.CreateRoleDto.Description">
            <summary>
            Gets or sets the description of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.CreateRoleDto.Permissions">
            <summary>
            Gets or sets the list of permissions to assign to this role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.CreateRoleDto.Priority">
            <summary>
            Gets or sets the priority of the role.
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.DTOs.UpdateRoleDto">
            <summary>
            Data transfer object for updating an existing role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.UpdateRoleDto.DisplayName">
            <summary>
            Gets or sets the display name of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.UpdateRoleDto.Description">
            <summary>
            Gets or sets the description of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.UpdateRoleDto.Permissions">
            <summary>
            Gets or sets the list of permissions to assign to this role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.UpdateRoleDto.Priority">
            <summary>
            Gets or sets the priority of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.UpdateRoleDto.IsActive">
            <summary>
            Gets or sets a value indicating whether the role is active.
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.DTOs.RoleOptionDto">
            <summary>
            Data transfer object for role options in dropdowns and selection lists.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleOptionDto.Id">
            <summary>
            Gets or sets the unique identifier of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleOptionDto.Name">
            <summary>
            Gets or sets the unique name of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleOptionDto.DisplayName">
            <summary>
            Gets or sets the display name of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleOptionDto.Description">
            <summary>
            Gets or sets the description of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleOptionDto.IconClass">
            <summary>
            Gets or sets the CSS icon class for the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleOptionDto.Priority">
            <summary>
            Gets or sets the priority of the role.
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.RoleOptionDto.KeyPermissions">
            <summary>
            Gets or sets the key permissions for display purposes.
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.DTOs.RoleUpgradeRequestDto">
            <summary>
            DTO for role upgrade request information
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.DTOs.CreateRoleUpgradeRequestDto">
            <summary>
            DTO for creating a new role upgrade request
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.DTOs.ReviewRoleUpgradeRequestDto">
            <summary>
            DTO for reviewing a role upgrade request
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.DTOs.RoleUpgradeRequestStatsDto">
            <summary>
            DTO for role upgrade request statistics
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.DTOs.SubscriptionPlanDto">
            <summary>
            Data transfer object for subscription plan information
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.SubscriptionPlanDto.MonthlyEquivalentPrice">
            <summary>
            Gets the monthly equivalent price for comparison purposes
            </summary>
        </member>
        <member name="P:StockFlowPro.Application.DTOs.SubscriptionPlanDto.HasTrial">
            <summary>
            Indicates if this plan has a trial period
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.Interfaces.IEnhancedRoleService">
            <summary>
            Interface for enhanced role management service
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.Interfaces.IRoleService">
            <summary>
            Service interface for role management operations.
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleService.GetAllRolesAsync(System.Boolean)">
            <summary>
            Gets all roles.
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleService.GetRoleOptionsAsync">
            <summary>
            Gets role options for dropdowns.
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleService.GetRoleByIdAsync(System.Guid)">
            <summary>
            Gets a role by its ID.
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleService.CreateRoleAsync(StockFlowPro.Application.DTOs.CreateRoleDto)">
            <summary>
            Creates a new role.
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleService.UpdateRoleAsync(System.Guid,StockFlowPro.Application.DTOs.UpdateRoleDto)">
            <summary>
            Updates an existing role.
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleService.DeleteRoleAsync(System.Guid)">
            <summary>
            Deletes a role.
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleService.GetAvailablePermissionsAsync">
            <summary>
            Gets available permissions for role assignment.
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.Interfaces.IRoleUpgradeRequestService">
            <summary>
            Service interface for managing role upgrade requests
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleUpgradeRequestService.CreateRequestAsync(System.Guid,StockFlowPro.Application.DTOs.CreateRoleUpgradeRequestDto)">
            <summary>
            Creates a new role upgrade request
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleUpgradeRequestService.GetAllRequestsAsync(System.Nullable{StockFlowPro.Domain.Enums.RoleUpgradeRequestStatus},System.Nullable{StockFlowPro.Domain.Enums.UserRole},System.Boolean)">
            <summary>
            Gets all role upgrade requests with optional filtering
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleUpgradeRequestService.GetUserRequestsAsync(System.Guid)">
            <summary>
            Gets role upgrade requests for a specific user
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleUpgradeRequestService.GetRequestByIdAsync(System.Guid)">
            <summary>
            Gets a specific role upgrade request by ID
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleUpgradeRequestService.ReviewRequestAsync(System.Guid,StockFlowPro.Application.DTOs.ReviewRoleUpgradeRequestDto)">
            <summary>
            Reviews a role upgrade request (approve or reject)
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleUpgradeRequestService.CancelRequestAsync(System.Guid,System.Guid)">
            <summary>
            Cancels a pending role upgrade request
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleUpgradeRequestService.UpdateRequestPriorityAsync(System.Guid,System.Int32)">
            <summary>
            Updates the priority of a pending request
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleUpgradeRequestService.GetRequestStatisticsAsync">
            <summary>
            Gets statistics about role upgrade requests
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleUpgradeRequestService.CanUserRequestRoleAsync(System.Guid,StockFlowPro.Domain.Enums.UserRole)">
            <summary>
            Checks if a user can request a specific role upgrade
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IRoleUpgradeRequestService.GetRequestsRequiringAttentionAsync">
            <summary>
            Gets pending requests that require attention (high priority or old requests)
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.Interfaces.ISubscriptionPlanService">
            <summary>
            Service interface for subscription plan operations
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetByIdAsync(System.Guid)">
            <summary>
            Gets a subscription plan by its ID
            </summary>
            <param name="id">The plan ID</param>
            <returns>Subscription plan DTO if found, null otherwise</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetByNameAsync(System.String)">
            <summary>
            Gets a subscription plan by its name
            </summary>
            <param name="name">The plan name</param>
            <returns>Subscription plan DTO if found, null otherwise</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetAllAsync">
            <summary>
            Gets all subscription plans
            </summary>
            <returns>Collection of subscription plan DTOs</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetActiveAsync">
            <summary>
            Gets all active subscription plans
            </summary>
            <returns>Collection of active subscription plan DTOs</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetPublicPlansAsync">
            <summary>
            Gets all public subscription plans (visible to customers)
            </summary>
            <returns>Collection of public subscription plan DTOs</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetByBillingIntervalAsync(StockFlowPro.Domain.Enums.BillingInterval)">
            <summary>
            Gets subscription plans by billing interval
            </summary>
            <param name="billingInterval">The billing interval</param>
            <returns>Collection of subscription plan DTOs</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetOrderedBySortOrderAsync">
            <summary>
            Gets subscription plans ordered by sort order
            </summary>
            <returns>Collection of subscription plan DTOs ordered by sort order</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetCheapestPlanAsync">
            <summary>
            Gets the cheapest available plan
            </summary>
            <returns>Cheapest subscription plan DTO if found, null otherwise</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetMostExpensivePlanAsync">
            <summary>
            Gets the most expensive available plan
            </summary>
            <returns>Most expensive subscription plan DTO if found, null otherwise</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetByStripeProductIdAsync(System.String)">
            <summary>
            Gets a subscription plan by Stripe product ID
            </summary>
            <param name="stripeProductId">The Stripe product ID</param>
            <returns>Subscription plan DTO if found, null otherwise</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetByStripePriceIdAsync(System.String)">
            <summary>
            Gets a subscription plan by Stripe price ID
            </summary>
            <param name="stripePriceId">The Stripe price ID</param>
            <returns>Subscription plan DTO if found, null otherwise</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.GetByPayPalPlanIdAsync(System.String)">
            <summary>
            Gets a subscription plan by PayPal plan ID
            </summary>
            <param name="payPalPlanId">The PayPal plan ID</param>
            <returns>Subscription plan DTO if found, null otherwise</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.ISubscriptionPlanService.ExistsByNameAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Checks if a subscription plan exists by name
            </summary>
            <param name="name">The plan name</param>
            <param name="excludeId">Optional ID to exclude from the check</param>
            <returns>True if plan exists, false otherwise</returns>
        </member>
        <member name="T:StockFlowPro.Application.Interfaces.IUserService">
            <summary>
            Service interface for user operations
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IUserService.GetByIdAsync(System.Guid)">
            <summary>
            Gets a user by their ID
            </summary>
            <param name="userId">The user ID</param>
            <returns>User DTO if found, null otherwise</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IUserService.GetByEmailAsync(System.String)">
            <summary>
            Gets a user by their email address
            </summary>
            <param name="email">The email address</param>
            <returns>User DTO if found, null otherwise</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IUserService.GetAllAsync">
            <summary>
            Gets all users
            </summary>
            <returns>Collection of user DTOs</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IUserService.SearchAsync(System.String,System.Nullable{StockFlowPro.Domain.Enums.UserRole},System.Nullable{System.Boolean})">
            <summary>
            Searches for users based on criteria
            </summary>
            <param name="searchTerm">Search term</param>
            <param name="role">Optional role filter</param>
            <param name="isActive">Optional active status filter</param>
            <returns>Collection of matching user DTOs</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IUserService.CreateAsync(StockFlowPro.Application.DTOs.CreateUserDto)">
            <summary>
            Creates a new user
            </summary>
            <param name="createUserDto">User creation data</param>
            <returns>Created user DTO</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IUserService.UpdateAsync(System.Guid,StockFlowPro.Application.DTOs.UpdateUserDto)">
            <summary>
            Updates an existing user
            </summary>
            <param name="userId">User ID</param>
            <param name="updateUserDto">User update data</param>
            <returns>Updated user DTO</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IUserService.UpdateEmailAsync(System.Guid,System.String)">
            <summary>
            Updates a user's email
            </summary>
            <param name="userId">User ID</param>
            <param name="email">New email address</param>
            <returns>Updated user DTO</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IUserService.ToggleStatusAsync(System.Guid)">
            <summary>
            Toggles user active status
            </summary>
            <param name="userId">User ID</param>
            <returns>Updated user DTO</returns>
        </member>
        <member name="M:StockFlowPro.Application.Interfaces.IUserService.ExistsAsync(System.Guid)">
            <summary>
            Checks if a user exists
            </summary>
            <param name="userId">User ID</param>
            <returns>True if user exists, false otherwise</returns>
        </member>
        <member name="T:StockFlowPro.Application.Services.RoleService">
            <summary>
            Service implementation for role management operations.
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.Services.RoleUpgradeRequestService">
            <summary>
            Service for managing role upgrade requests
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.Services.SubscriptionPlanService">
            <summary>
            Service implementation for subscription plan operations using MediatR
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.Services.UserService">
            <summary>
            Service implementation for user operations using MediatR
            </summary>
        </member>
        <member name="T:StockFlowPro.Application.Validators.EnhancedCreateUserCommandValidator">
            <summary>
            Enhanced validator for CreateUserCommand with improved email validation
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Validators.EnhancedCreateUserCommandValidator.BeValidEmailFormat(System.String)">
            <summary>
            Validates email format using the EmailNormalizer utility
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Validators.EnhancedCreateUserCommandValidator.NotBeBlockedDomain(System.String)">
            <summary>
            Checks if the email domain is not in the blocked list
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Validators.EnhancedCreateUserCommandValidator.BeUniqueEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if the email is unique using case-insensitive comparison
            </summary>
        </member>
        <member name="M:StockFlowPro.Application.Validators.EnhancedCreateUserCommandValidator.BeValidAge(System.DateTime)">
            <summary>
            Validates that the user's age is within acceptable limits
            </summary>
        </member>
    </members>
</doc>
