
services:
  stockflow-db:
    build:
      context: .
      dockerfile: Dockerfile.mssql
    container_name: stockflow-db
    hostname: stockflow-db
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=StockFlow123!
      - MSSQL_PID=Developer
      - MSSQL_COLLATION=SQL_Latin1_General_CP1_CI_AS
      - MSSQL_LCID=1033
      - MEMORY_LIMIT_MB=2048
    volumes:
      - mssql-data:/var/opt/mssql
    ports:
      - "1433:1433"
    networks:
      - stockflow-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'StockFlow123!' -Q 'SELECT 1' -C -b || exit 1"]
      interval: 15s
      retries: 10
      start_period: 120s
      timeout: 10s

  redis:
    image: redis:7-alpine
    container_name: stockflow-redis
    hostname: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - stockflow-redis-data:/data
    networks:
      - stockflow-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
      
  mailhog:
    image: mailhog/mailhog:latest
    container_name: stockflow-mailhog
    hostname: mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - stockflow-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M
      
  stockflow-api:
    build:
      context: .
      dockerfile: StockFlowPro.Web/Dockerfile
    container_name: stockflow-api
    hostname: stockflow-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_HTTP_PORTS=8080
      - DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0
      - DOTNET_RUNNING_IN_CONTAINER=true
      - DOTNET_EnableDiagnostics=0
      - ConnectionStrings__DefaultConnection=Server=stockflow-db,1433;Database=StockFlowProDb;User ID=sa;Password=StockFlow123!;TrustServerCertificate=True;Connect Timeout=60;Command Timeout=300;Encrypt=False;MultipleActiveResultSets=true;Pooling=true;Max Pool Size=100;
      - Redis__Configuration=redis:6379
      - Redis__InstanceName=StockFlowPro
      - Jwt__Key=your-very-secure-jwt-key-that-is-at-least-32-characters-long-for-security
      - Jwt__Issuer=StockFlowPro
      - Jwt__Audience=StockFlowPro-Client
      - Jwt__ExpiryInMinutes=60
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft=Warning
      - Logging__LogLevel__Microsoft.Hosting.Lifetime=Information
    ports:
      - "5000:8080"
    volumes:
      - ./StockFlowPro.Web/App_Data:/app/App_Data
      - backend-logs:/app/logs
    depends_on:
      stockflow-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stockflow-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      retries: 5
      start_period: 60s
      timeout: 15s

  stockflow-frontend:
    image: node:20-alpine
    container_name: stockflow-frontend
    hostname: stockflow-frontend
    working_dir: /app
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=/api
    ports:
      - "5173:5173"
    volumes:
      - ./StockFlowPro.UI:/app
      - /app/node_modules
    networks:
      - stockflow-network
    depends_on:
      stockflow-api:
        condition: service_started
    restart: unless-stopped
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"

  nginx:
    image: nginx:alpine
    container_name: stockflow-nginx
    hostname: nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./StockFlowPro.UI/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    depends_on:
      - stockflow-api
      - stockflow-frontend
    networks:
      - stockflow-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:80 || exit 1"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

volumes:
  mssql-data:
    driver: local
    name: mssql-data
  stockflow-redis-data:
    driver: local
    name: stockflow-redis-data
  backend-logs:
    driver: local
    name: backend-logs
  nginx-cache:
    driver: local
    name: nginx-cache
  nginx-logs:
    driver: local
    name: nginx-logs

networks:
  stockflow-network:
    driver: bridge
    name: stockflow-network
    ipam:
      config:
        - subnet: 172.20.0.0/16