services:
  stockflow-db:
    build:
      context: .
      dockerfile: Dockerfile.mssql
    container_name: stockflow-db
    hostname: stockflow-db
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD:-StockFlow123!}"
      MSSQL_PID: "Developer"
      MSSQL_COLLATION: "SQL_Latin1_General_CP1_CI_AS"
      MSSQL_LCID: "1033"
      MEMORY_LIMIT_MB: "2048"
      DB_APP_USER_PASSWORD: "${DB_APP_USER_PASSWORD:-ChangeMe_StrongAppPwd123!}"
    volumes:
      - mssql-data:/var/opt/mssql
    ports:
      - "1433:1433"
    networks:
      - stockflow-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P '${DB_PASSWORD:-StockFlow123!}' -Q 'SELECT 1' -C -b || exit 1"]
      interval: 20s
      retries: 15
      start_period: 360s
      timeout: 10s

  redis:
    image: redis:7.4-alpine
    container_name: stockflow-redis
    hostname: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - stockflow-redis-data:/data
    networks:
      - stockflow-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: stockflow-mailhog
    hostname: mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - stockflow-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  stockflow-api:
    build:
      context: .
      dockerfile: StockFlowPro.Web/Dockerfile
    container_name: stockflow-api
    hostname: stockflow-api
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "http://+:8080"
      ASPNETCORE_HTTP_PORTS: "8080"
      DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: "0"
      DOTNET_RUNNING_IN_CONTAINER: "true"
      DOTNET_EnableDiagnostics: "0"
      ConnectionStrings__DefaultConnection: "Server=stockflow-db,1433;Database=StockFlowProDB;User ID=sa;Password=${DB_PASSWORD:-StockFlow123!};TrustServerCertificate=True;Connect Timeout=60;Command Timeout=300;Encrypt=False;MultipleActiveResultSets=true;Pooling=true;Max Pool Size=100;"
      Redis__Configuration: "redis:6379"
      Redis__InstanceName: "StockFlowPro"
      Jwt__Key: "your-very-secure-jwt-key-that-is-at-least-32-characters-long-for-security"
      Jwt__Issuer: "StockFlowPro"
      Jwt__Audience: "StockFlowPro-Client"
      Jwt__ExpiryInMinutes: "60"
      Logging__LogLevel__Default: "Information"
      Logging__LogLevel__Microsoft: "Warning"
      Logging__LogLevel__Microsoft.Hosting.Lifetime: "Information"
    ports:
      - "5000:8080"
    volumes:
      - ./StockFlowPro.Web/App_Data:/app/App_Data
      - backend-logs:/app/logs
    depends_on:
      stockflow-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stockflow-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      retries: 5
      start_period: 60s
      timeout: 15s
    develop:
      watch:
        # Rebuild when C# source files change
        - action: rebuild
          path: ./StockFlowPro.Web
          ignore:
            - bin/
            - obj/
            - App_Data/
        - action: rebuild
          path: ./StockFlowPro.Application
          ignore:
            - bin/
            - obj/
        - action: rebuild
          path: ./StockFlowPro.Domain
          ignore:
            - bin/
            - obj/
        - action: rebuild
          path: ./StockFlowPro.Infrastructure
          ignore:
            - bin/
            - obj/
        - action: rebuild
          path: ./StockFlowPro.Shared
          ignore:
            - bin/
            - obj/
        # Rebuild when project files change
        - action: rebuild
          path: ./*.sln
        - action: rebuild
          path: ./StockFlowPro.Web/*.csproj
        - action: rebuild
          path: ./StockFlowPro.Application/*.csproj
        - action: rebuild
          path: ./StockFlowPro.Domain/*.csproj
        - action: rebuild
          path: ./StockFlowPro.Infrastructure/*.csproj
        - action: rebuild
          path: ./StockFlowPro.Shared/*.csproj
        - action: rebuild
          path: ./Directory.*.props
        - action: rebuild
          path: ./global.json
        - action: rebuild
          path: ./nuget.config
        - action: rebuild
          path: ./StockFlowPro.Web/Dockerfile
        - action: rebuild
          path: ./StockFlowPro.Web/Vite.config.ts
        - action: rebuild
          path: ./StockFlowPro.Web/tsconfig*.json
        - action: rebuild
          path: ./StockFlowPro.Web/tailwind.config.js
        - action: rebuild
          path: ./StockFlowPro.Web/postcss.config.js
        - action: rebuild
          path: ./StockFlowPro.Web/eslint.config.js

  stockflow-frontend:
    build:
      context: ./StockFlowPro.UI  # Point to the frontend directory
      dockerfile: Dockerfile.dev  # Use the development Dockerfile
    container_name: stockflow-frontend
    hostname: stockflow-frontend
    working_dir: /app
    environment:
      NODE_ENV: "development"
      VITE_API_BASE_URL: "/api"
      VITE_WS_URL: "ws://localhost:8080"
      NPM_CONFIG_UPDATE_NOTIFIER: "false"
      NPM_CONFIG_FUND: "false"
    ports:
      - "5173:5173"
    volumes:
      - ./StockFlowPro.UI/package.json:/app/package.json
      - ./StockFlowPro.UI/package-lock.json:/app/package-lock.json
      - ./StockFlowPro.UI/vite.config.ts:/app/vite.config.ts
      - ./StockFlowPro.UI/tsconfig.json:/app/tsconfig.json
      - ./StockFlowPro.UI/tsconfig.app.json:/app/tsconfig.app.json
      - ./StockFlowPro.UI/tsconfig.node.json:/app/tsconfig.node.json
      - ./StockFlowPro.UI/tailwind.config.js:/app/tailwind.config.js
      - ./StockFlowPro.UI/postcss.config.js:/app/postcss.config.js
      - ./StockFlowPro.UI/eslint.config.js:/app/eslint.config.js
      - ./StockFlowPro.UI/index.html:/app/index.html
      - /app/node_modules
    networks:
      - stockflow-network
    depends_on:
      stockflow-api:
        condition: service_started
    restart: unless-stopped
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5173/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    develop:
      watch:
        # Sync TypeScript/JavaScript source files (hot reload)
        - action: sync
          path: ./StockFlowPro.UI/src
          target: /app/src
          ignore:
            - "**/*.test.ts"
            - "**/*.test.tsx"
            - "**/*.spec.ts"
            - "**/*.spec.tsx"
        # Sync public assets
        - action: sync
          path: ./StockFlowPro.UI/public
          target: /app/public
        # Rebuild when package files change
        - action: rebuild
          path: ./StockFlowPro.UI/package.json
        - action: rebuild
          path: ./StockFlowPro.UI/package-lock.json
        - action: rebuild
          path: ./StockFlowPro.UI/vite.config.ts
        - action: rebuild
          path: ./StockFlowPro.UI/tsconfig*.json
        - action: rebuild
          path: ./StockFlowPro.UI/tailwind.config.js
        - action: rebuild
          path: ./StockFlowPro.UI/postcss.config.js
        - action: rebuild
          path: ./StockFlowPro.UI/eslint.config.js

  stockflow-nginx:
    image: nginx:1.27.3-alpine
    container_name: stockflow-nginx
    hostname: nginx
    ports:
      - "8080:8080"
      - "8443:443"
    volumes:
      - ./StockFlowPro.UI/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - stockflow-api
      - stockflow-frontend
    networks:
      - stockflow-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8080 || exit 1"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

volumes:
  mssql-data:
    driver: local
    name: mssql-data
  stockflow-redis-data:
    driver: local
    name: stockflow-redis-data
  backend-logs:
    driver: local
    name: backend-logs
  nginx-logs:
    driver: local
    name: nginx-logs

networks:
  stockflow-network:
    driver: bridge
    name: stockflow-network
    ipam:
      config:
        - subnet: 172.20.0.0/16