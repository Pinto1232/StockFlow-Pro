version: '3.8'

services:
  # Grafana - Visualization and Dashboards
  grafana:
    image: grafana/grafana-enterprise:latest
    container_name: stockflow-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.stockflowpro.local`)"

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: stockflow-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus-storage:/prometheus
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - node-exporter

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: stockflow-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: unless-stopped

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: stockflow-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/loki.yml:/etc/loki/local-config.yaml
      - loki-storage:/loki
    networks:
      - monitoring
    restart: unless-stopped

  # Promtail - Log Shipper
  promtail:
    image: grafana/promtail:latest
    container_name: stockflow-promtail
    volumes:
      - ./promtail/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - loki

  # AlertManager - Alert Routing
  alertmanager:
    image: prom/alertmanager:latest
    container_name: stockflow-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-storage:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring
    restart: unless-stopped

  # SQL Server Exporter - Database Metrics
  sql-exporter:
    image: awaragi/prometheus-mssql-exporter:latest
    container_name: stockflow-sql-exporter
    ports:
      - "4000:4000"
    environment:
      - SERVER=host.docker.internal
      - USERNAME=sa
      - PASSWORD=YourPassword123!
      - DATABASE=StockFlowProDb
    networks:
      - monitoring
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Redis (for caching metrics)
  redis:
    image: redis:alpine
    container_name: stockflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-storage:/data
    networks:
      - monitoring
    restart: unless-stopped

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: stockflow-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - redis

networks:
  monitoring:
    driver: bridge

volumes:
  grafana-storage:
    driver: local
  prometheus-storage:
    driver: local
  loki-storage:
    driver: local
  alertmanager-storage:
    driver: local
  redis-storage:
    driver: local