@page
@model ManageUsersModel
@{
    ViewData["Title"] = "Manage Users";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">User Management</h2>
        <a href="/AdminPanel" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left me-2"></i>Back to Admin Panel
        </a>
    </div>
    
    <div class="row mb-4">
        <div class="col-md-6">
            <button class="btn btn-success" onclick="showCreateUserModal()">
                <i class="fas fa-plus me-2"></i>Create New User
            </button>
        </div>
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" id="userSearch" class="form-control" placeholder="Search users by name, email, phone, or role...">
                <button class="btn btn-outline-secondary" type="button" id="clearSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Users (Database + Mock Data)</h5>
            <div class="d-flex align-items-center">
                <button class="btn btn-sm btn-info me-2" onclick="showSyncStatus()">
                    <i class="fas fa-sync"></i> Sync Status
                </button>
                <button class="btn btn-sm btn-warning me-2" onclick="syncDataSources()">
                    <i class="fas fa-database"></i> Sync Now
                </button>
                <span id="userCount" class="badge bg-primary me-3">0 users</span>
                <div class="dropdown">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <span id="pageSize">10</span> per page
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item page-size-option" href="#" data-size="5">5 per page</a></li>
                        <li><a class="dropdown-item page-size-option" href="#" data-size="10">10 per page</a></li>
                        <li><a class="dropdown-item page-size-option" href="#" data-size="25">25 per page</a></li>
                        <li><a class="dropdown-item page-size-option" href="#" data-size="50">50 per page</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div id="user-table-section">
                <!-- User table will be loaded here -->
            </div>
        </div>
        <div class="card-footer">
            <nav aria-label="User pagination">
                <ul class="pagination pagination-sm justify-content-center mb-0" id="pagination">
                    <!-- Pagination will be generated here -->
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Confirmation Snackbar -->
<div id="confirmationSnackbar" class="confirmation-snackbar">
    <div class="confirmation-content">
        <div class="confirmation-message">
            <i class="fas fa-exclamation-triangle text-warning me-2"></i>
            <span id="confirmationText">Are you sure you want to delete this user?</span>
        </div>
        <div class="confirmation-actions">
            <button type="button" class="btn btn-sm btn-secondary me-2" onclick="hideConfirmationSnackbar()">Cancel</button>
            <button type="button" class="btn btn-sm btn-danger" id="confirmDeleteBtn" onclick="confirmDelete()">Delete</button>
        </div>
    </div>
</div>

<!-- Modal for Create/Edit User -->
<div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="userModalLabel">User</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="userForm">
          <input type="hidden" id="userId" />
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" class="form-control" id="firstName" required />
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" class="form-control" id="lastName" required />
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" required />
          </div>
          <div class="form-group">
            <label for="phoneNumber">Phone Number</label>
            <input type="text" class="form-control" id="phoneNumber" required />
          </div>
          <div class="form-group">
            <label for="dateOfBirth">Date of Birth</label>
            <input type="date" class="form-control" id="dateOfBirth" required />
          </div>
          <div class="form-group">
            <label for="role">Role</label>
            <select class="form-control" id="role">
              <option value="User">User</option>
              <option value="Manager">Manager</option>
              <option value="Admin">Admin</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer justify-content-between">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="saveUserBtn">Save</button>
      </div>
    </div>
  </div>
</div>

<!-- Sync Status Modal -->
<div class="modal fade" id="syncStatusModal" tabindex="-1" aria-labelledby="syncStatusModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="syncStatusModalLabel">Data Source Sync Status</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="syncStatusContent">
          <div class="text-center">
            <output class="spinner-border">
              <span class="visually-hidden">Loading...</span>
            </output>
            <p class="mt-2">Checking sync status...</p>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="syncDataSources()">Sync Now</button>
      </div>
    </div>
  </div>
</div>

<style>
/* Loading Spinner Styles */
.loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem 1rem;
    min-height: 200px;
}

.loading-spinner {
    width: 3rem;
    height: 3rem;
    border: 0.3em solid rgba(13, 110, 253, 0.25);
    border-radius: 50%;
    border-top-color: #0d6efd;
    animation: spin 1s ease-in-out infinite;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

.loading-text {
    margin-top: 1rem;
    color: #6c757d;
    font-size: 0.9rem;
}

/* Search Input Enhancements */
#userSearch {
    transition: box-shadow 0.15s ease-in-out;
}

#userSearch:focus {
    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
}

/* Table Enhancements */
.table-responsive-wrapper {
    overflow-x: auto;
}

.user-table {
    margin-bottom: 0;
}

.user-table th {
    background-color: #f8f9fa;
    border-top: none;
    font-weight: 600;
    color: #495057;
    white-space: nowrap;
}

.user-table td {
    vertical-align: middle;
}

.user-table .btn {
    margin-right: 0.25rem;
}

.user-table .btn:last-child {
    margin-right: 0;
}

/* Empty State */
.empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: #6c757d;
}

.empty-state i {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

/* Pagination Enhancements */
.pagination .page-link {
    color: #0d6efd;
    border-color: #dee2e6;
}

.pagination .page-item.active .page-link {
    background-color: #0d6efd;
    border-color: #0d6efd;
}

.pagination .page-item.disabled .page-link {
    color: #6c757d;
}

/* User Count Badge */
#userCount {
    font-size: 0.75rem;
}

/* Confirmation Snackbar Styles */
.confirmation-snackbar {
    position: fixed;
    bottom: -200px;
    left: 50%;
    transform: translateX(-50%);
    background: white;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0,0,0,0.3);
    border: 1px solid #e0e0e0;
    z-index: 1060;
    min-width: 400px;
    max-width: 500px;
    transition: bottom 0.3s ease-out;
}

.confirmation-snackbar.show {
    bottom: 30px;
}

.confirmation-content {
    padding: 20px;
}

.confirmation-message {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    font-size: 16px;
    color: #333;
}

.confirmation-actions {
    display: flex;
    justify-content: center;
    gap: 8px;
}

.confirmation-snackbar .btn {
    min-width: 80px;
}

/* Responsive Design */
@@media (max-width: 768px) {
    .card-header {
        flex-direction: column;
        align-items: stretch !important;
    }
    
    .card-header > div {
        margin-top: 0.5rem;
        justify-content: space-between;
    }
    
    .user-table .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }
}
</style>

@section Scripts {
<script>
class UserManagement {
    constructor() {
        this.allUsers = [];
        this.filteredUsers = [];
        this.currentPage = 1;
        this.pageSize = 10;
        this.searchTerm = '';
        this.userToDelete = null;
        this.isLoading = false;
        
        this.roleNames = { 1: 'Admin', 2: 'User', 3: 'Manager' };
        this.roleNumbers = { 'Admin': 1, 'User': 2, 'Manager': 3 };
        
        this.init();
    }

    init() {
        this.bindEvents();
        this.loadUsers();
    }

    bindEvents() {
        const searchInput = document.getElementById('userSearch');
        const clearSearchBtn = document.getElementById('clearSearch');
        const saveUserBtn = document.getElementById('saveUserBtn');
        
        if (searchInput) {
            searchInput.addEventListener('input', this.debounce((e) => {
                this.searchTerm = e.target.value.toLowerCase();
                this.currentPage = 1;
                this.filterAndRenderUsers();
            }, 300));
        }
        
        if (clearSearchBtn) {
            clearSearchBtn.addEventListener('click', () => {
                searchInput.value = '';
                this.searchTerm = '';
                this.currentPage = 1;
                this.filterAndRenderUsers();
            });
        }
        
        if (saveUserBtn) {
            saveUserBtn.addEventListener('click', () => this.handleSaveUser());
        }
        
        document.querySelectorAll('.page-size-option').forEach(option => {
            option.addEventListener('click', (e) => {
                e.preventDefault();
                this.pageSize = parseInt(e.target.dataset.size);
                this.currentPage = 1;
                document.getElementById('pageSize').textContent = this.pageSize;
                this.filterAndRenderUsers();
            });
        });
    }

    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    async loadUsers() {
        if (this.isLoading) return;
        
        this.isLoading = true;
        this.showLoadingState();

        try {
            const response = await fetch('/api/user-management/users');
            if (!response.ok) {
                throw new Error(`Failed to load users: ${response.status}`);
            }
            
            this.allUsers = await response.json();
            this.filterAndRenderUsers();
        } catch (error) {
            console.error('Error loading users:', error);
            this.showErrorState(error.message);
        } finally {
            this.isLoading = false;
        }
    }

    filterAndRenderUsers() {
        this.filteredUsers = this.allUsers.filter(user => {
            if (!this.searchTerm) return true;
            
            const fullName = `${user.firstName} ${user.lastName}`.toLowerCase();
            const email = user.email.toLowerCase();
            const phone = user.phoneNumber.toLowerCase();
            const role = this.roleNames[user.role]?.toLowerCase() || '';
            
            return fullName.includes(this.searchTerm) || 
                   email.includes(this.searchTerm) || 
                   phone.includes(this.searchTerm) || 
                   role.includes(this.searchTerm);
        });

        this.updateUserCount();
        this.renderTable();
        this.renderPagination();
    }

    updateUserCount() {
        const countElement = document.getElementById('userCount');
        if (countElement) {
            const total = this.filteredUsers.length;
            countElement.textContent = `${total} user${total !== 1 ? 's' : ''}`;
        }
    }

    renderTable() {
        const container = document.getElementById('user-table-section');
        if (!container) return;

        if (this.filteredUsers.length === 0) {
            container.innerHTML = this.getEmptyStateHTML();
            return;
        }

        const startIndex = (this.currentPage - 1) * this.pageSize;
        const endIndex = startIndex + this.pageSize;
        const pageUsers = this.filteredUsers.slice(startIndex, endIndex);

        const tableHTML = `
            <div class="table-responsive-wrapper">
                <table class="table table-hover user-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Role</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${pageUsers.map(user => this.createUserRowHTML(user)).join('')}
                    </tbody>
                </table>
            </div>
        `;

        container.innerHTML = tableHTML;
        this.bindTableEvents();
    }

    createUserRowHTML(user) {
        const fullName = user.fullName || `${user.firstName} ${user.lastName}`;
        const roleName = this.roleNames[user.role] || user.role;
        const statusBadge = user.isActive ? 
            '<span class="badge bg-success">Active</span>' : 
            '<span class="badge bg-secondary">Inactive</span>';

        return `
            <tr>
                <td>${this.escapeHtml(fullName)}</td>
                <td>${this.escapeHtml(user.email)}</td>
                <td>${this.escapeHtml(user.phoneNumber)}</td>
                <td>${this.escapeHtml(roleName)}</td>
                <td>${statusBadge}</td>
                <td>
                    <button class="btn btn-sm btn-info edit-user-btn" data-user-id="${user.id}">
                        <i class="fas fa-edit"></i> Edit
                    </button>
                    <button class="btn btn-sm btn-danger delete-user-btn" data-user-id="${user.id}">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                </td>
            </tr>
        `;
    }

    bindTableEvents() {
        document.querySelectorAll('.edit-user-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const userId = e.currentTarget.dataset.userId;
                this.editUser(userId);
            });
        });

        document.querySelectorAll('.delete-user-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const userId = e.currentTarget.dataset.userId;
                this.deleteUser(userId);
            });
        });
    }

    renderPagination() {
        const paginationContainer = document.getElementById('pagination');
        if (!paginationContainer) return;

        const totalPages = Math.ceil(this.filteredUsers.length / this.pageSize);
        
        if (totalPages <= 1) {
            paginationContainer.innerHTML = '';
            return;
        }

        let paginationHTML = '';
        
        paginationHTML += `
            <li class="page-item ${this.currentPage === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="${this.currentPage - 1}">Previous</a>
            </li>
        `;

        const startPage = Math.max(1, this.currentPage - 2);
        const endPage = Math.min(totalPages, this.currentPage + 2);

        if (startPage > 1) {
            paginationHTML += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`;
            if (startPage > 2) {
                paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
            }
        }

        for (let i = startPage; i <= endPage; i++) {
            paginationHTML += `
                <li class="page-item ${i === this.currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                </li>
            `;
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
            }
            paginationHTML += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`;
        }

        paginationHTML += `
            <li class="page-item ${this.currentPage === totalPages ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="${this.currentPage + 1}">Next</a>
            </li>
        `;

        paginationContainer.innerHTML = paginationHTML;

        paginationContainer.querySelectorAll('.page-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const page = parseInt(e.target.dataset.page);
                if (page && page !== this.currentPage && page >= 1 && page <= totalPages) {
                    this.currentPage = page;
                    this.renderTable();
                    this.renderPagination();
                }
            });
        });
    }

    showLoadingState() {
        const container = document.getElementById('user-table-section');
        if (container) {
            container.innerHTML = `
                <div class="loading-container">
                    <div class="loading-spinner"></div>
                    <div class="loading-text">Loading users...</div>
                </div>
            `;
        }
    }

    showErrorState(message) {
        const container = document.getElementById('user-table-section');
        if (container) {
            container.innerHTML = `
                <div class="alert alert-danger m-3" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    ${this.escapeHtml(message)}
                </div>
            `;
        }
    }

    getEmptyStateHTML() {
        const message = this.searchTerm ? 
            'No users found matching your search criteria.' : 
            'No users found.';
        
        return `
            <div class="empty-state">
                <i class="fas fa-users"></i>
                <h5>${message}</h5>
                ${this.searchTerm ? '<p>Try adjusting your search terms.</p>' : '<p>Create your first user to get started.</p>'}
            </div>
        `;
    }

    escapeHtml(text) {
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, m => map[m]);
    }

    editUser(id) {
        const user = this.allUsers.find(u => u.id === id);
        if (!user) {
            this.showSnackbar('User not found.', 'error');
            return;
        }

        document.getElementById('userId').value = user.id;
        document.getElementById('firstName').value = user.firstName || '';
        document.getElementById('lastName').value = user.lastName || '';
        document.getElementById('email').value = user.email || '';
        document.getElementById('phoneNumber').value = user.phoneNumber || '';
        document.getElementById('dateOfBirth').value = user.dateOfBirth ? user.dateOfBirth.split('T')[0] : '';
        
        const roleName = this.roleNames[user.role] || 'User';
        document.getElementById('role').value = roleName;
        
        const modal = new bootstrap.Modal(document.getElementById('userModal'));
        modal.show();
    }

    deleteUser(id) {
        const user = this.allUsers.find(u => u.id === id);
        const userName = user ? (user.fullName || `${user.firstName} ${user.lastName}`) : 'this user';
        
        this.userToDelete = id;
        document.getElementById('confirmationText').textContent = `Are you sure you want to delete "${userName}"?`;
        showConfirmationSnackbar();
    }

    async handleSaveUser() {
        const id = document.getElementById('userId').value;
        const userData = {
            firstName: document.getElementById('firstName').value.trim(),
            lastName: document.getElementById('lastName').value.trim(),
            email: document.getElementById('email').value.trim(),
            phoneNumber: document.getElementById('phoneNumber').value.trim(),
            dateOfBirth: document.getElementById('dateOfBirth').value,
            role: this.roleNumbers[document.getElementById('role').value]
        };

        if (!userData.firstName || !userData.lastName || !userData.email) {
            this.showSnackbar('Please fill in all required fields', 'error');
            return;
        }

        try {
            const url = id ? `/api/user-management/users/${id}` : '/api/user-management/users';
            const method = id ? 'PUT' : 'POST';
            
            const response = await fetch(url, {
                method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(userData)
            });

            if (!response.ok) {
                throw new Error('Failed to save user');
            }

            const modal = bootstrap.Modal.getInstance(document.getElementById('userModal'));
            modal?.hide();
            
            await this.loadUsers();
            this.showSnackbar(id ? 'User updated successfully in both database and mock data!' : 'User created successfully in both database and mock data!', 'info');
        } catch (error) {
            console.error('Error saving user:', error);
            this.showSnackbar('Failed to save user', 'error');
        }
    }

    async confirmDelete() {
        if (!this.userToDelete) return;

        try {
            const response = await fetch(`/api/user-management/users/${this.userToDelete}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                throw new Error('Failed to delete user');
            }

            await this.loadUsers();
            this.showSnackbar('User deleted successfully from both database and mock data!', 'info');
            this.userToDelete = null;
        } catch (error) {
            console.error('Error deleting user:', error);
            this.showSnackbar('Failed to delete user', 'error');
            this.userToDelete = null;
        }
    }

    showSnackbar(message, type = 'info') {
        if (typeof window.showSnackbar === 'function') {
            window.showSnackbar(message, type);
        } else {
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    }
}

let userToDelete = null;
let userManagement;

function showCreateUserModal() {
    document.getElementById('userId').value = '';
    document.getElementById('userForm').reset();
    const modal = new bootstrap.Modal(document.getElementById('userModal'));
    modal.show();
}

function showConfirmationSnackbar() {
    const snackbar = document.getElementById('confirmationSnackbar');
    snackbar.classList.add('show');
}

function hideConfirmationSnackbar() {
    const snackbar = document.getElementById('confirmationSnackbar');
    snackbar.classList.remove('show');
    userToDelete = null;
}

function confirmDelete() {
    if (userManagement) {
        userManagement.confirmDelete();
    }
    hideConfirmationSnackbar();
}

document.addEventListener('DOMContentLoaded', () => {
    userManagement = new UserManagement();
});

async function showSyncStatus() {
    const modal = new bootstrap.Modal(document.getElementById('syncStatusModal'));
    modal.show();
    
    try {
        const response = await fetch('/api/user-management/sync-status');
        if (!response.ok) {
            throw new Error('Failed to get sync status');
        }
        
        const status = await response.json();
        const syncStatusContent = document.getElementById('syncStatusContent');
        
        const syncIcon = status.inSync ? 
            '<i class="fas fa-check-circle text-success"></i>' : 
            '<i class="fas fa-exclamation-triangle text-warning"></i>';
        
        const syncText = status.inSync ? 'In Sync' : 'Out of Sync';
        const syncClass = status.inSync ? 'text-success' : 'text-warning';
        
        let issuesHtml = '';
        if (status.syncIssues && status.syncIssues.length > 0) {
            issuesHtml = `
                <div class="alert alert-warning mt-3">
                    <h6>Issues:</h6>
                    <ul class="mb-0">
                        ${status.syncIssues.map(issue => `<li>${issue}</li>`).join('')}
                    </ul>
                </div>
            `;
        }
        
        syncStatusContent.innerHTML = `
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body text-center">
                            <i class="fas fa-database fa-2x text-primary mb-2"></i>
                            <h5>Database</h5>
                            <p class="h4">${status.databaseUserCount}</p>
                            <small class="text-muted">Users</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body text-center">
                            <i class="fas fa-file-alt fa-2x text-info mb-2"></i>
                            <h5>Mock Data</h5>
                            <p class="h4">${status.mockDataUserCount}</p>
                            <small class="text-muted">Users</small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="text-center mt-3">
                <h5 class="${syncClass}">
                    ${syncIcon} ${syncText}
                </h5>
                <p class="text-muted">
                    Last sync: ${status.lastSyncTime ? new Date(status.lastSyncTime).toLocaleString() : 'Never'}
                </p>
            </div>
            ${issuesHtml}
        `;
    } catch (error) {
        console.error('Error getting sync status:', error);
        document.getElementById('syncStatusContent').innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Failed to get sync status: ${error.message}
            </div>
        `;
    }
}

async function syncDataSources() {
    try {
        const response = await fetch('/api/user-management/sync', {
            method: 'POST'
        });
        
        if (!response.ok) {
            throw new Error('Failed to sync data sources');
        }
        
        const result = await response.json();
        
        const modal = bootstrap.Modal.getInstance(document.getElementById('syncStatusModal'));
        if (modal) {
            modal.hide();
        }
        
        if (userManagement) {
            await userManagement.loadUsers();
        }
        
        if (typeof userManagement?.showSnackbar === 'function') {
            userManagement.showSnackbar('Data sources synchronized successfully!', 'info');
        } else {
            alert('Data sources synchronized successfully!');
        }
    } catch (error) {
        console.error('Error syncing data sources:', error);
        if (typeof userManagement?.showSnackbar === 'function') {
            userManagement.showSnackbar('Failed to sync data sources: ' + error.message, 'error');
        } else {
            alert('Failed to sync data sources: ' + error.message);
        }
    }
}
</script>
}