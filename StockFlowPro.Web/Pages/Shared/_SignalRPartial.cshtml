@if (User.Identity != null && User.Identity.IsAuthenticated)
{
    <style>
        /* SignalR Connection Status in Navbar Styling */
        #signalr-connection-status {
            font-size: 0.85rem;
        }

        /* Responsive adjustments for mobile */
        @@media (max-width: 991.98px) {
            #signalr-connection-status {
                font-size: 0.8rem;
                margin-bottom: 0.5rem;
            }
            
            #signalr-connection-status .d-flex {
                padding: 0.4rem 0.8rem;
            }
        }

        @@media (max-width: 768px) {
            #signalr-connection-status {
                font-size: 0.75rem;
            }
            
            #signalr-connection-status .d-flex {
                padding: 0.3rem 0.6rem;
            }
        }
    </style>

    <!-- Toast Container for SignalR Notifications -->
    <div id="toast-container" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;"></div>

    <!-- Alert Container for Critical Notifications -->
    <div id="alert-container" class="position-fixed top-0 start-50 translate-middle-x mt-5" style="z-index: 1050; width: 90%; max-width: 500px;"></div>

    <!-- SignalR Scripts -->
    <script src="https://unpkg.com/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>
    <script src="~/js/signalr-client.js" asp-append-version="true"></script>

    <!-- User Context for SignalR -->
    <script>
        // Set user context for SignalR client
        document.body.setAttribute('data-user-id', '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value');
        document.body.setAttribute('data-user-role', '@User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value');
        document.body.setAttribute('data-user-name', '@User.Identity.Name');
    </script>

    <!-- Page-specific SignalR Integration -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Wait for SignalR to be initialized
            const waitForSignalR = () => {
                if (window.stockFlowSignalR && window.stockFlowSignalR.connection) {
                    // Hide loading indicator once connected
                    window.stockFlowSignalR.connection.onreconnected(() => {
                        const loadingIndicator = document.getElementById('signalr-loading');
                        if (loadingIndicator) {
                            loadingIndicator.style.display = 'none';
                        }
                    });

                    // Show loading indicator when reconnecting
                    window.stockFlowSignalR.connection.onreconnecting(() => {
                        const loadingIndicator = document.getElementById('signalr-loading');
                        if (loadingIndicator) {
                            loadingIndicator.style.display = 'inline-block';
                        }
                    });

                    // Hide loading indicator if already connected
                    if (window.stockFlowSignalR.isConnected) {
                        const loadingIndicator = document.getElementById('signalr-loading');
                        if (loadingIndicator) {
                            loadingIndicator.style.display = 'none';
                        }
                    }
                } else {
                    // Retry after a short delay if SignalR isn't ready yet
                    setTimeout(waitForSignalR, 100);
                }
            };
            
            waitForSignalR();
        });
    </script>

    var currentPage = ViewContext.RouteData.Values["page"]?.ToString();

    @if (currentPage == "/Dashboard")
    {
        <script>
            // Dashboard-specific SignalR handlers
            document.addEventListener('DOMContentLoaded', function() {
                const initializeDashboard = () => {
                    if (window.stockFlowSignalR && window.stockFlowSignalR.isConnected) {
                        // Join dashboard group for real-time updates
                        window.stockFlowSignalR.joinGroup('Dashboard');
                        
                        // Override dashboard update handler
                        window.stockFlowSignalR.handleDashboardUpdate = function(data) {
                            console.log('Dashboard Update:', data);
                            
                            // Update dashboard metrics
                            Object.keys(data).forEach(key => {
                                const element = document.getElementById(`dashboard-${key}`);
                                if (element) {
                                    element.textContent = data[key];
                                    element.classList.add('updated');
                                    setTimeout(() => element.classList.remove('updated'), 2000);
                                }
                            });
                        };
                    } else {
                        // Wait for SignalR to be ready
                        setTimeout(initializeDashboard, 100);
                    }
                };
                
                initializeDashboard();
            });
        </script>
    }

    @if (currentPage == "/Products")
    {
        <script>
            // Products page-specific SignalR handlers
            document.addEventListener('DOMContentLoaded', function() {
                const initializeProducts = () => {
                    if (window.stockFlowSignalR && window.stockFlowSignalR.isConnected) {
                        // Join products group for real-time updates
                        window.stockFlowSignalR.joinGroup('Products');
                        
                        // Override stock update handler for products page
                        window.stockFlowSignalR.handleStockUpdate = function(data) {
                            console.log('Stock Update on Products Page:', data);
                            
                            // Update product stock display
                            const productRow = document.querySelector(`tr[data-product-id="${data.ProductId}"]`);
                            if (productRow) {
                                const stockCell = productRow.querySelector('.stock-quantity');
                                if (stockCell) {
                                    stockCell.textContent = data.NewQuantity;
                                    stockCell.classList.add('updated');
                                    
                                    // Update stock level indicator
                                    stockCell.classList.remove('low', 'critical');
                                    if (data.NewQuantity === 0) {
                                        stockCell.classList.add('critical');
                                    } else if (data.NewQuantity <= 10) {
                                        stockCell.classList.add('low');
                                    }
                                    
                                    setTimeout(() => stockCell.classList.remove('updated'), 2000);
                                }
                            }
                        };
                    } else {
                        // Wait for SignalR to be ready
                        setTimeout(initializeProducts, 100);
                    }
                };
                
                initializeProducts();
            });
        </script>
    }

    @if (currentPage == "/Invoices")
    {
        <script>
            // Invoices page-specific SignalR handlers
            document.addEventListener('DOMContentLoaded', function() {
                const initializeInvoices = () => {
                    if (window.stockFlowSignalR && window.stockFlowSignalR.isConnected) {
                        // Join invoices group for real-time updates
                        window.stockFlowSignalR.joinGroup('Invoices');
                        
                        // Override invoice update handler
                        window.stockFlowSignalR.handleInvoiceUpdate = function(data) {
                            console.log('Invoice Update on Invoices Page:', data);
                            
                            // Update invoice status display
                            const invoiceRow = document.querySelector(`tr[data-invoice-id="${data.InvoiceId}"]`);
                            if (invoiceRow) {
                                const statusCell = invoiceRow.querySelector('.invoice-status');
                                if (statusCell) {
                                    statusCell.textContent = data.Status;
                                    statusCell.className = `invoice-status status-${data.Status.toLowerCase()}`;
                                    statusCell.classList.add('updated');
                                    setTimeout(() => statusCell.classList.remove('updated'), 2000);
                                }
                            }
                        };
                    } else {
                        // Wait for SignalR to be ready
                        setTimeout(initializeInvoices, 100);
                    }
                };
                
                initializeInvoices();
            });
        </script>
    }

    @if (currentPage == "/AdminPanel" && User.IsInRole("Admin"))
    {
        <script>
            // Admin panel-specific SignalR handlers
            document.addEventListener('DOMContentLoaded', function() {
                const initializeAdmin = () => {
                    if (window.stockFlowSignalR && window.stockFlowSignalR.isConnected) {
                        // Join admin group for system notifications
                        window.stockFlowSignalR.joinGroup('Admin');
                        
                        // Override system metrics handler
                        window.stockFlowSignalR.handleSystemMetrics = function(data) {
                            console.log('System Metrics Update:', data);
                            
                            // Update system metrics display
                            Object.keys(data.Metrics).forEach(key => {
                                const element = document.getElementById(`system-metric-${key}`);
                                if (element) {
                                    element.textContent = data.Metrics[key];
                                    element.classList.add('updated');
                                    setTimeout(() => element.classList.remove('updated'), 1000);
                                }
                            });
                        };
                        
                        // Override user activity handler
                        window.stockFlowSignalR.handleUserActivity = function(data) {
                            console.log('User Activity:', data);
                            
                            // Update user activity log
                            const activityLog = document.getElementById('user-activity-log');
                            if (activityLog) {
                                const logEntry = document.createElement('div');
                                logEntry.className = 'activity-entry';
                                logEntry.innerHTML = `
                                    <span class="timestamp">${new Date(data.Timestamp).toLocaleTimeString()}</span>
                                    <span class="user">User ${data.UserId}</span>
                                    <span class="activity">${data.Activity}</span>
                                `;
                                activityLog.prepend(logEntry);
                                
                                // Keep only last 50 entries
                                while (activityLog.children.length > 50) {
                                    activityLog.removeChild(activityLog.lastChild);
                                }
                            }
                        };
                    } else {
                        // Wait for SignalR to be ready
                        setTimeout(initializeAdmin, 100);
                    }
                };
                
                initializeAdmin();
            });
        </script>
    }
}