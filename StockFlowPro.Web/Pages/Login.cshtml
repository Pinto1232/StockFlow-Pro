@page
@model LoginModel
@{
    ViewData["Title"] = "Login";
}

@if (Model.IsLoggedIn)
{
    <div class="d-flex align-items-center justify-content-center min-vh-100">
        <div class="card shadow-sm p-4" style="width: 100%; max-width: 400px; border-radius: 1rem;">
            <div class="text-center mb-4">
                <h2 class="fw-bold mb-2">You are logged in</h2>
                <p class="text-muted mb-0">You are currently signed in as @(User?.Identity?.Name ?? "")</p>
            </div>
            <div class="d-grid mb-3">
                <a href="/AdminPanel" class="btn btn-primary btn-lg">Go to Admin Panel</a>
            </div>
            <form method="post" asp-page-handler="Logout">
                <div class="d-grid">
                    <button type="submit" class="btn btn-outline-danger btn-lg">Logout</button>
                </div>
            </form>
        </div>
    </div>
}
else
{
    <div class="d-flex align-items-center justify-content-center min-vh-100">
        <div class="card shadow-sm p-4" style="width: 100%; max-width: 450px; border-radius: 1rem;">
            <ul class="nav nav-tabs mb-4" id="authTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="login-tab" data-bs-toggle="tab" data-bs-target="#login" type="button" role="tab" aria-controls="login" aria-selected="true">Sign In</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="register-tab" data-bs-toggle="tab" data-bs-target="#register" type="button" role="tab" aria-controls="register" aria-selected="false">Register</button>
                </li>
            </ul>
            
            <div class="tab-content" id="authTabsContent">
                <div class="tab-pane fade show active" id="login" role="tabpanel" aria-labelledby="login-tab" tabindex="0">
                    <div class="text-center mb-4">
                        <h2 class="fw-bold mb-2">Sign in to your account</h2>
                        <p class="text-muted mb-0">Please enter your credentials</p>
                    </div>
                    @if (Model.ErrorMessage != null)
                    {
                        <div class="alert alert-danger text-center py-2">@Model.ErrorMessage</div>
                    }
                    <form method="post" asp-page-handler="Login">
                        <div class="mb-3">
                            <label for="Input_Username" class="form-label">Email, First Name, or Last Name</label>
                            <input type="text" class="form-control form-control-lg" id="Input_Username" name="Username" required autofocus autocomplete="username" value="@Model.Username" />
                        </div>
                        <div class="mb-3">
                            <label for="Input_Password" class="form-label">Password</label>
                            <input type="password" class="form-control form-control-lg" id="Input_Password" name="Password" required autocomplete="current-password" />
                        </div>
                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-primary btn-lg">Login</button>
                        </div>
                        <div class="text-center">
                            <a href="/ForgotPassword" class="text-decoration-none">Forgot your password?</a>
                        </div>
                    </form>
                </div>
                
                <div class="tab-pane fade" id="register" role="tabpanel" aria-labelledby="register-tab" tabindex="0">
                    <div class="text-center mb-4">
                        <h2 class="fw-bold mb-2">Create your account</h2>
                        <p class="text-muted mb-0">Please fill in your information</p>
                    </div>
                    @if (Model.RegisterErrorMessage != null)
                    {
                        <div class="alert alert-danger text-center py-3 mb-4" style="border: 2px solid #dc3545; background-color: #f8d7da;">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>@Model.RegisterErrorMessage</strong>
                        </div>
                    }
                    @if (Model.RegisterSuccessMessage != null)
                    {
                        <div class="alert alert-success text-center py-2">@Model.RegisterSuccessMessage</div>
                    }
                    <form method="post" asp-page-handler="Register">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="Register_FirstName" class="form-label">First Name</label>
                                <input type="text" class="form-control" id="Register_FirstName" name="RegisterModel.FirstName" required autocomplete="given-name" value="@Model.RegisterModel.FirstName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="Register_LastName" class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="Register_LastName" name="RegisterModel.LastName" required autocomplete="family-name" value="@Model.RegisterModel.LastName" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="Register_Email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="Register_Email" name="RegisterModel.Email" required autocomplete="email" value="@Model.RegisterModel.Email" />
                        </div>
                        <div class="mb-3">
                            <label for="Register_PhoneNumber" class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="Register_PhoneNumber" name="RegisterModel.PhoneNumber" required autocomplete="tel" value="@Model.RegisterModel.PhoneNumber" />
                        </div>
                        <div class="mb-3">
                            <label for="Register_DateOfBirth" class="form-label">Date of Birth</label>
                            <input type="date" class="form-control" id="Register_DateOfBirth" name="RegisterModel.DateOfBirth" required autocomplete="bday" value="@Model.RegisterModel.DateOfBirth.ToString("yyyy-MM-dd")" />
                        </div>
                        <div class="mb-3">
                            <label for="Register_Role" class="form-label">Role</label>
                            <select class="form-select" id="Register_Role" name="RegisterModel.Role">
                                <option value="2" selected>User</option>
                                <option value="3">Manager</option>
                                <option value="1">Admin</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="Register_Password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="Register_Password" name="RegisterModel.Password" required autocomplete="new-password" minlength="6" />
                            <div class="form-text">Password must be at least 6 characters long.</div>
                        </div>
                        <div class="mb-3">
                            <label for="Register_ConfirmPassword" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="Register_ConfirmPassword" name="RegisterModel.ConfirmPassword" required autocomplete="new-password" minlength="6" />
                            <div class="form-text">Please confirm your password.</div>
                        </div>
                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-success btn-lg">Register</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Check if there's a registration error or success and switch to register tab
    var hasRegisterError = @Html.Raw(Model.RegisterErrorMessage != null ? "true" : "false");
    var hasRegisterSuccess = @Html.Raw(Model.RegisterSuccessMessage != null ? "true" : "false");
    
    // Only auto-switch to register tab if there's an error or success message
    if (hasRegisterError || hasRegisterSuccess) {
        // Use Bootstrap's Tab API to properly switch tabs
        var registerTabEl = document.getElementById('register-tab');
        if (registerTabEl) {
            var registerTab = new bootstrap.Tab(registerTabEl);
            registerTab.show();
        }
    }

    // Password validation functionality
    var passwordField = document.getElementById('Register_Password');
    var confirmPasswordField = document.getElementById('Register_ConfirmPassword');
    var registerForm = document.querySelector('form[asp-page-handler="Register"]');
    
    // Only proceed if all elements exist
    if (passwordField && confirmPasswordField && registerForm) {
        
        function validatePasswordMatch() {
            var password = passwordField.value;
            var confirmPassword = confirmPasswordField.value;
            
            if (confirmPassword && password !== confirmPassword) {
                confirmPasswordField.setCustomValidity('Passwords do not match');
                confirmPasswordField.classList.add('is-invalid');
            } else {
                confirmPasswordField.setCustomValidity('');
                confirmPasswordField.classList.remove('is-invalid');
            }
        }
        
        function validatePasswordLength() {
            var password = passwordField.value;
            
            if (password && password.length < 6) {
                passwordField.setCustomValidity('Password must be at least 6 characters long');
                passwordField.classList.add('is-invalid');
            } else {
                passwordField.setCustomValidity('');
                passwordField.classList.remove('is-invalid');
            }
        }
        
        passwordField.addEventListener('input', function() {
            validatePasswordLength();
            validatePasswordMatch();
        });
        
        confirmPasswordField.addEventListener('input', validatePasswordMatch);
        
        registerForm.addEventListener('submit', function(e) {
            validatePasswordLength();
            validatePasswordMatch();
            
            if (!registerForm.checkValidity()) {
                e.preventDefault();
                e.stopPropagation();
            }
        });
    }
    
    // Clear form validation states when switching tabs
    var loginTab = document.getElementById('login-tab');
    var registerTab = document.getElementById('register-tab');
    
    if (loginTab) {
        loginTab.addEventListener('click', function() {
            // Clear any validation states on login form
            var loginForm = document.querySelector('form[asp-page-handler="Login"]');
            if (loginForm) {
                var inputs = loginForm.querySelectorAll('input');
                inputs.forEach(function(input) {
                    input.classList.remove('is-invalid');
                    input.setCustomValidity('');
                });
            }
        });
    }
    
    if (registerTab) {
        registerTab.addEventListener('click', function() {
            // Clear any validation states on register form
            if (registerForm) {
                var inputs = registerForm.querySelectorAll('input');
                inputs.forEach(function(input) {
                    input.classList.remove('is-invalid');
                    input.setCustomValidity('');
                });
            }
        });
    }
});
</script>