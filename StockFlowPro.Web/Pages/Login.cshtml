@page
@model LoginModel
@{
    ViewData["Title"] = "Login";
}

@await Html.PartialAsync("_AuthFormStyles")

@if (Model.IsLoggedIn)
{
    <div class="auth-container">
        <div class="auth-card">
            <div class="logged-in-card">
                <div class="user-avatar">
                    <i class="fas fa-user"></i>
                </div>
                <h2 class="welcome-title">Welcome Back</h2>
                <p class="welcome-subtitle">
                    You are currently signed in as <span class="username">@(User?.Identity?.Name ?? "")</span>
                </p>
                <div class="button-group">
                    <a href="/AdminPanel" class="auth-button">Go to Admin Panel</a>
                    <form method="post" asp-page-handler="Logout">
                        <button type="submit" class="auth-button outline">Logout</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="auth-container">
        <div class="auth-card">
            <div class="auth-tabs">
                <button class="auth-tab active" id="login-tab" data-bs-toggle="tab" data-bs-target="#login" type="button" aria-controls="login">Sign In</button>
                <button class="auth-tab" id="register-tab" data-bs-toggle="tab" data-bs-target="#register" type="button" aria-controls="register">Register</button>
            </div>
            
            <div class="tab-content" id="authTabsContent">
                <div class="tab-pane fade show active" id="login" aria-labelledby="login-tab">
                    <div class="auth-content">
                        <div class="auth-header">
                            <h2 class="auth-title">Welcome Back</h2>
                            <p class="auth-subtitle">Please enter your credentials to continue</p>
                        </div>
                        
                        @if (Model.ErrorMessage != null)
                        {
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-circle"></i>
                                @Model.ErrorMessage
                            </div>
                        }
                        
                        <form method="post" asp-page-handler="Login" class="auth-form">
                            <div class="form-group">
                                <div class="floating-input">
                                    <i class="fas fa-envelope input-icon"></i>
                                    <input type="text" id="Input_Username" name="Username" placeholder=" " required autofocus autocomplete="username" value="@Model.Username" />
                                    <label for="Input_Username" class="floating-label">Email, First Name, or Last Name</label>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <div class="floating-input">
                                    <i class="fas fa-lock input-icon"></i>
                                    <input type="password" id="Input_Password" name="Password" placeholder=" " required autocomplete="current-password" />
                                    <label for="Input_Password" class="floating-label">Password</label>
                                    <button type="button" class="password-toggle" onclick="togglePassword('Input_Password', this)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <button type="submit" class="auth-button">Sign In</button>
                            
                            <div class="forgot-password">
                                <a href="/ForgotPassword">Forgot your password?</a>
                            </div>
                        </form>
                    </div>
                </div>
                
                <div class="tab-pane fade" id="register" aria-labelledby="register-tab">
                    <div class="auth-content">
                        <div class="auth-header">
                            <h2 class="auth-title">Create Account</h2>
                            <p class="auth-subtitle">Please fill in your information to get started</p>
                        </div>
                        
                        @if (Model.RegisterErrorMessage != null)
                        {
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle"></i>
                                @Model.RegisterErrorMessage
                            </div>
                        }
                        @if (Model.RegisterSuccessMessage != null)
                        {
                            <div class="alert alert-success">
                                <i class="fas fa-check-circle"></i>
                                @Model.RegisterSuccessMessage
                            </div>
                        }
                        
                        <form method="post" asp-page-handler="Register" class="auth-form">
                            <div class="form-row">
                                <div class="form-group">
                                    <div class="floating-input">
                                        <i class="fas fa-user input-icon"></i>
                                        <input type="text" id="Register_FirstName" name="RegisterModel.FirstName" placeholder=" " required autocomplete="given-name" value="@Model.RegisterModel.FirstName" />
                                        <label for="Register_FirstName" class="floating-label">First Name</label>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="floating-input">
                                        <i class="fas fa-user input-icon"></i>
                                        <input type="text" id="Register_LastName" name="RegisterModel.LastName" placeholder=" " required autocomplete="family-name" value="@Model.RegisterModel.LastName" />
                                        <label for="Register_LastName" class="floating-label">Last Name</label>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <div class="floating-input">
                                    <i class="fas fa-envelope input-icon"></i>
                                    <input type="email" id="Register_Email" name="RegisterModel.Email" placeholder=" " required autocomplete="email" value="@Model.RegisterModel.Email" />
                                    <label for="Register_Email" class="floating-label">Email Address</label>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <div class="floating-input">
                                    <i class="fas fa-phone input-icon"></i>
                                    <input type="tel" id="Register_PhoneNumber" name="RegisterModel.PhoneNumber" placeholder=" " required autocomplete="tel" value="@Model.RegisterModel.PhoneNumber" />
                                    <label for="Register_PhoneNumber" class="floating-label">Phone Number</label>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <div class="floating-input">
                                    <i class="fas fa-calendar input-icon"></i>
                                    <input type="date" id="Register_DateOfBirth" name="RegisterModel.DateOfBirth" placeholder=" " required autocomplete="bday" value="@Model.RegisterModel.DateOfBirth.ToString("yyyy-MM-dd")" />
                                    <label for="Register_DateOfBirth" class="floating-label">Date of Birth</label>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <div class="form-select-wrapper">
                                    <label for="Register_Role">Role</label>
                                    <select id="Register_Role" name="RegisterModel.Role">
                                        <option value="2" selected>User</option>
                                        <option value="3">Manager</option>
                                        <option value="1">Admin</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <div class="floating-input">
                                    <i class="fas fa-lock input-icon"></i>
                                    <input type="password" id="Register_Password" name="RegisterModel.Password" placeholder=" " required autocomplete="new-password" minlength="6" />
                                    <label for="Register_Password" class="floating-label">Password</label>
                                    <button type="button" class="password-toggle" onclick="togglePassword('Register_Password', this)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="form-error" id="password-error" style="display: none;">
                                    <i class="fas fa-exclamation-circle"></i>
                                    Password must be at least 6 characters long
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <div class="floating-input">
                                    <i class="fas fa-lock input-icon"></i>
                                    <input type="password" id="Register_ConfirmPassword" name="RegisterModel.ConfirmPassword" placeholder=" " required autocomplete="new-password" minlength="6" />
                                    <label for="Register_ConfirmPassword" class="floating-label">Confirm Password</label>
                                    <button type="button" class="password-toggle" onclick="togglePassword('Register_ConfirmPassword', this)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="form-error" id="confirm-password-error" style="display: none;">
                                    <i class="fas fa-exclamation-circle"></i>
                                    Passwords do not match
                                </div>
                            </div>
                            
                            <button type="submit" class="auth-button success">Create Account</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
// Password toggle functionality
function togglePassword(inputId, button) {
    const input = document.getElementById(inputId);
    const icon = button.querySelector('i');
    
    if (input.type === 'password') {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
    } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
    }
}

// Enhanced tab functionality
function switchTab(tabId) {
    // Remove active class from all tabs and content
    document.querySelectorAll('.auth-tab').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.tab-pane').forEach(pane => {
        pane.classList.remove('show', 'active');
    });
    
    // Add active class to clicked tab
    document.getElementById(tabId + '-tab').classList.add('active');
    document.getElementById(tabId).classList.add('show', 'active');
}

document.addEventListener('DOMContentLoaded', function() {
    var hasRegisterError = @Html.Raw(Model.RegisterErrorMessage != null ? "true" : "false");
    var hasRegisterSuccess = @Html.Raw(Model.RegisterSuccessMessage != null ? "true" : "false");
    
    // Show register tab if there are register messages
    if (hasRegisterError || hasRegisterSuccess) {
        switchTab('register');
    }

    // Enhanced tab click handlers
    document.getElementById('login-tab').addEventListener('click', function() {
        switchTab('login');
        clearFormErrors();
    });
    
    document.getElementById('register-tab').addEventListener('click', function() {
        switchTab('register');
        clearFormErrors();
    });

    // Form validation
    var passwordField = document.getElementById('Register_Password');
    var confirmPasswordField = document.getElementById('Register_ConfirmPassword');
    var passwordError = document.getElementById('password-error');
    var confirmPasswordError = document.getElementById('confirm-password-error');
    
    if (passwordField && confirmPasswordField) {
        
        function validatePasswordLength() {
            var password = passwordField.value;
            var isValid = password.length >= 6 || password.length === 0;
            
            if (!isValid) {
                passwordField.classList.add('input-error');
                passwordError.style.display = 'flex';
            } else {
                passwordField.classList.remove('input-error');
                passwordError.style.display = 'none';
            }
            
            return isValid;
        }
        
        function validatePasswordMatch() {
            var password = passwordField.value;
            var confirmPassword = confirmPasswordField.value;
            var isValid = password === confirmPassword || confirmPassword.length === 0;
            
            if (!isValid) {
                confirmPasswordField.classList.add('input-error');
                confirmPasswordError.style.display = 'flex';
            } else {
                confirmPasswordField.classList.remove('input-error');
                confirmPasswordError.style.display = 'none';
            }
            
            return isValid;
        }
        
        // Real-time validation
        passwordField.addEventListener('input', function() {
            validatePasswordLength();
            if (confirmPasswordField.value) {
                validatePasswordMatch();
            }
        });
        
        confirmPasswordField.addEventListener('input', validatePasswordMatch);
        
        // Form submission validation
        var registerForm = document.querySelector('form[asp-page-handler="Register"]');
        if (registerForm) {
            registerForm.addEventListener('submit', function(e) {
                var isPasswordValid = validatePasswordLength();
                var isMatchValid = validatePasswordMatch();
                
                if (!isPasswordValid || !isMatchValid) {
                    e.preventDefault();
                    e.stopPropagation();
                }
            });
        }
    }
    
    // Clear form errors function
    function clearFormErrors() {
        document.querySelectorAll('.input-error').forEach(input => {
            input.classList.remove('input-error');
        });
        document.querySelectorAll('.form-error').forEach(error => {
            error.style.display = 'none';
        });
    }
    
    // Enhanced floating label behavior
    document.querySelectorAll('.floating-input input').forEach(input => {
        // Handle autofill detection
        function checkAutofill() {
            if (input.value || input.matches(':-webkit-autofill')) {
                input.classList.add('has-value');
            } else {
                input.classList.remove('has-value');
            }
        }
        
        input.addEventListener('input', checkAutofill);
        input.addEventListener('focus', checkAutofill);
        input.addEventListener('blur', checkAutofill);
        
        // Initial check
        setTimeout(checkAutofill, 100);
    });
    
    // Smooth form animations
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    });
    
    document.querySelectorAll('.form-group').forEach(group => {
        group.style.opacity = '0';
        group.style.transform = 'translateY(20px)';
        group.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        observer.observe(group);
    });
});
</script>