name: PR Review Process

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

jobs:
  # Automated checks that run on every PR
  automated-checks:
    name: Automated Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
        continue-on-error: true

      - name: Check code formatting
        run: dotnet format --verify-no-changes --verbosity diagnostic

      - name: Security scan
        run: |
          dotnet list package --vulnerable --include-transitive || true
          dotnet list package --deprecated || true

  # Label PRs based on changes
  auto-label:
    name: Auto Label PR
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Label based on files changed
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const labels = new Set();
            
            // Analyze changed files
            for (const file of files) {
              const path = file.filename;
              
              // Component labels
              if (path.includes('StockFlowPro.Domain/')) {
                labels.add('component: domain');
              }
              if (path.includes('StockFlowPro.Application/')) {
                labels.add('component: application');
              }
              if (path.includes('StockFlowPro.Infrastructure/')) {
                labels.add('component: infrastructure');
              }
              if (path.includes('StockFlowPro.Web/')) {
                labels.add('component: api');
              }
              if (path.includes('.Tests/')) {
                labels.add('component: tests');
              }
              
              // Type labels based on file types
              if (path.endsWith('.md') || path.includes('docs/')) {
                labels.add('type: documentation');
              }
              if (path.includes('Migrations/')) {
                labels.add('type: database');
              }
              if (path.includes('.github/')) {
                labels.add('type: ci/cd');
              }
              
              // Security-sensitive files
              if (path.includes('Authentication') || path.includes('Authorization') || path.includes('Security')) {
                labels.add('security: review-required');
              }
              
              // Breaking changes detection
              if (path.includes('Controllers/') || path.includes('DTOs/') || path.includes('Models/')) {
                labels.add('review: api-changes');
              }
            }
            
            // Size labels based on lines changed
            const totalChanges = files.reduce((sum, file) => sum + file.changes, 0);
            if (totalChanges < 10) {
              labels.add('size: xs');
            } else if (totalChanges < 50) {
              labels.add('size: s');
            } else if (totalChanges < 200) {
              labels.add('size: m');
            } else if (totalChanges < 500) {
              labels.add('size: l');
            } else {
              labels.add('size: xl');
            }
            
            // Apply labels
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: Array.from(labels)
              });
            }

  # Check PR requirements
  pr-requirements:
    name: PR Requirements Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Check PR title format
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            const validPrefixes = ['feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'test:', 'chore:', 'perf:', 'security:'];
            
            const hasValidPrefix = validPrefixes.some(prefix => title.toLowerCase().startsWith(prefix));
            
            if (!hasValidPrefix) {
              core.setFailed(`PR title should start with one of: ${validPrefixes.join(', ')}`);
            }

      - name: Check PR description
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.pull_request.body || '';
            
            if (body.length < 50) {
              core.setFailed('PR description is too short. Please provide a detailed description.');
            }
            
            // Check for required sections
            const requiredSections = ['## 📋 Description', '## 🧪 Testing'];
            const missingSections = requiredSections.filter(section => !body.includes(section));
            
            if (missingSections.length > 0) {
              core.setFailed(`PR description is missing required sections: ${missingSections.join(', ')}`);
            }

      - name: Check linked issues
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.pull_request.body || '';
            const issueKeywords = ['fixes', 'closes', 'resolves', 'relates to'];
            
            const hasLinkedIssue = issueKeywords.some(keyword => 
              body.toLowerCase().includes(keyword + ' #') || 
              body.toLowerCase().includes(keyword + ' ' + context.repo.owner + '/' + context.repo.repo + '#')
            );
            
            if (!hasLinkedIssue) {
              console.log('Warning: PR does not appear to link to any issues. Consider linking related issues.');
            }

  # Assign reviewers based on CODEOWNERS and PR content
  assign-reviewers:
    name: Assign Reviewers
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    
    steps:
      - name: Auto-assign reviewers
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const reviewers = new Set();
            const teamReviewers = new Set();
            
            // Add reviewers based on file changes
            for (const file of files) {
              const path = file.filename;
              
              // Critical files require additional review
              if (path.includes('Domain/') || path.includes('Security/') || path.includes('Migrations/')) {
                reviewers.add('your-username'); // Replace with actual username
              }
            }
            
            // Request reviews (if reviewers are available)
            if (reviewers.size > 0) {
              try {
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  reviewers: Array.from(reviewers)
                });
              } catch (error) {
                console.log('Could not assign reviewers:', error.message);
              }
            }

  # Post review guidelines comment
  review-guidelines:
    name: Post Review Guidelines
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    
    steps:
      - name: Post review guidelines
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 👋 Welcome to the PR Review Process!

            Thank you for your contribution! Here's what happens next:

            ### 🔍 Automated Checks
            - ✅ Build and test validation
            - ✅ Code formatting check
            - ✅ Security scan
            - ✅ Test coverage analysis

            ### 👥 Review Process
            1. **Code Review**: Team members will review your code for quality, security, and best practices
            2. **Testing Review**: Verify that tests are comprehensive and passing
            3. **Documentation Review**: Ensure documentation is updated if needed

            ### 📋 Review Checklist for Reviewers
            - [ ] Code quality and adherence to standards
            - [ ] Test coverage and quality
            - [ ] Security considerations
            - [ ] Performance implications
            - [ ] Documentation completeness
            - [ ] Breaking changes identified

            ### 🚀 Merge Requirements
            - All automated checks must pass
            - At least one approving review required
            - No unresolved conversations
            - Branch must be up to date with main

            ### 💡 Tips for Faster Review
            - Keep PRs focused and reasonably sized
            - Provide clear descriptions and context
            - Respond promptly to feedback
            - Test your changes thoroughly

            Happy coding! 🎉`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Update project board
  update-project:
    name: Update Project Board
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    
    steps:
      - name: Move to In Review
        uses: actions/github-script@v7
        with:
          script: |
            // Add PR to project board and move to "In Review" column
            // This would require project board API integration
            console.log('PR opened - should be moved to In Review column');

  # Notify on review completion
  review-completed:
    name: Review Completed Actions
    runs-on: ubuntu-latest
    if: github.event.review.state == 'approved'
    
    steps:
      - name: Check if ready to merge
        uses: actions/github-script@v7
        with:
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            
            const approvals = reviews.filter(review => review.state === 'APPROVED').length;
            const requiredApprovals = 1; // Adjust based on your requirements
            
            if (approvals >= requiredApprovals) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `🎉 This PR has received ${approvals} approval(s) and is ready to merge! 

                Please ensure:
                - [ ] All automated checks are passing
                - [ ] Branch is up to date with main
                - [ ] No unresolved conversations remain
                
                You can now merge this PR when ready.`
              });
            }