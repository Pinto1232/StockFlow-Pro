openapi: 3.1.0
info:
  title: StockFlow Pro API
  description: |
    A comprehensive inventory management system API built with .NET Core and Clean Architecture principles.
    
    ## Features
    - User management with role-based access control
    - Product inventory tracking
    - Invoice management system
    - Comprehensive reporting and analytics
    - Real-time notifications
    
    ## Authentication
    This API uses JWT Bearer token authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Rate Limiting
    - Authenticated users: 1000 requests per hour
    - Unauthenticated users: 100 requests per hour
    - Search endpoints: 60 requests per minute
  version: 1.0.0
  contact:
    name: StockFlow Pro Support
    url: https://github.com/your-username/StockFlow-Pro
    email: support@stockflowpro.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.stockflowpro.com/api
    description: Production server
  - url: https://staging-api.stockflowpro.com/api
    description: Staging server
  - url: http://localhost:5000/api
    description: Development server

security:
  - BearerAuth: []

paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a paginated list of users with optional filtering
      security:
        - BearerAuth: []
      parameters:
        - name: activeOnly
          in: query
          description: Filter active users only
          required: false
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Successful response
          headers:
            X-Total-Count:
              description: Total number of users
              schema:
                type: integer
            X-Page:
              description: Current page number
              schema:
                type: integer
            X-Page-Size:
              description: Items per page
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/by-email/{email}:
    get:
      tags:
        - Users
      summary: Get user by email
      description: Retrieve a specific user by their email address
      security:
        - BearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          description: User email address
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/search:
    get:
      tags:
        - Users
      summary: Search users
      description: Search users by name or email
      security:
        - BearerAuth: []
      parameters:
        - name: searchTerm
          in: query
          required: true
          description: Search term (minimum 2 characters)
          schema:
            type: string
            minLength: 2
        - name: maxResults
          in: query
          description: Maximum number of results
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/email:
    put:
      tags:
        - Users
      summary: Update user email
      description: Update a user's email address
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserEmailDto'
      responses:
        '200':
          description: Email updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/status:
    patch:
      tags:
        - Users
      summary: Toggle user status
      description: Activate or deactivate a user (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
              description: Active status (true for active, false for inactive)
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /optimizedusers/statistics:
    get:
      tags:
        - Users
      summary: Get user statistics
      description: Get comprehensive user statistics (Manager/Admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatistics'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        firstName:
          type: string
          description: User's first name
          example: "John"
        lastName:
          type: string
          description: User's last name
          example: "Doe"
        fullName:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          description: User's phone number
          example: "+1-555-0123"
        dateOfBirth:
          type: string
          format: date-time
          description: User's date of birth
          example: "1990-01-01T00:00:00Z"
        age:
          type: integer
          description: User's calculated age
          example: 34
        isActive:
          type: boolean
          description: Whether the user is active
          example: true
        createdAt:
          type: string
          format: date-time
          description: When the user was created
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          nullable: true
          description: When the user was last updated
          example: "2024-01-01T00:00:00Z"
        role:
          $ref: '#/components/schemas/UserRole'

    CreateUserDto:
      type: object
      required:
        - firstName
        - lastName
        - email
        - dateOfBirth
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's first name
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's last name
          example: "Doe"
        email:
          type: string
          format: email
          description: User's email address (must be unique)
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          description: User's phone number
          example: "+1-555-0123"
        dateOfBirth:
          type: string
          format: date-time
          description: User's date of birth (must be in the past)
          example: "1990-01-01T00:00:00Z"
        role:
          $ref: '#/components/schemas/UserRole'

    UpdateUserDto:
      type: object
      required:
        - firstName
        - lastName
        - dateOfBirth
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's first name
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's last name
          example: "Doe"
        phoneNumber:
          type: string
          description: User's phone number
          example: "+1-555-0123"
        dateOfBirth:
          type: string
          format: date-time
          description: User's date of birth
          example: "1990-01-01T00:00:00Z"
        role:
          $ref: '#/components/schemas/UserRole'

    UpdateUserEmailDto:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: New email address (must be unique)
          example: "newemail@example.com"

    UserRole:
      type: string
      enum:
        - User
        - Manager
        - Admin
      description: User role determining access permissions
      example: "User"

    UserStatistics:
      type: object
      properties:
        totalUsers:
          type: integer
          description: Total number of users
          example: 150
        activeUsers:
          type: integer
          description: Number of active users
          example: 142
        inactiveUsers:
          type: integer
          description: Number of inactive users
          example: 8
        adminUsers:
          type: integer
          description: Number of admin users
          example: 2
        managerUsers:
          type: integer
          description: Number of manager users
          example: 15
        regularUsers:
          type: integer
          description: Number of regular users
          example: 133
        lastUpdated:
          type: string
          format: date-time
          description: When statistics were last calculated
          example: "2024-01-01T00:00:00Z"

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: Error message
              example: "Validation failed"
            details:
              type: object
              description: Additional error details
              additionalProperties: true
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: "2024-01-01T00:00:00Z"

    ValidationError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Validation failed"
            details:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
              example:
                firstName: ["First name is required"]
                email: ["Email format is invalid"]
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "BAD_REQUEST"
              message: "Invalid request data"
            timestamp: "2024-01-01T00:00:00Z"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Authentication required"
            timestamp: "2024-01-01T00:00:00Z"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "FORBIDDEN"
              message: "Insufficient permissions to access this resource"
            timestamp: "2024-01-01T00:00:00Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "NOT_FOUND"
              message: "User with ID 550e8400-e29b-41d4-a716-446655440000 not found"
            timestamp: "2024-01-01T00:00:00Z"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "INTERNAL_SERVER_ERROR"
              message: "An unexpected error occurred"
            timestamp: "2024-01-01T00:00:00Z"

tags:
  - name: Users
    description: User management operations
  - name: Products
    description: Product inventory operations (planned)
  - name: Invoices
    description: Invoice management operations (planned)
  - name: Reports
    description: Reporting and analytics operations (planned)